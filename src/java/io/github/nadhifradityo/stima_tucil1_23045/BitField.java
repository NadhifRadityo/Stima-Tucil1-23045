
// Do NOT edit this file. This file was generated.

package io.github.nadhifradityo.stima_tucil1_23045;

public class BitField {
	public static final int WIDTH = 16;
	public static final int HEIGHT = 16;
	public static final int DEPTH = 16;
	protected long _0;
	protected long _1;
	protected long _2;
	protected long _3;
	protected long _4;
	protected long _5;
	protected long _6;
	protected long _7;
	protected long _8;
	protected long _9;
	protected long _10;
	protected long _11;
	protected long _12;
	protected long _13;
	protected long _14;
	protected long _15;
	protected long _16;
	protected long _17;
	protected long _18;
	protected long _19;
	protected long _20;
	protected long _21;
	protected long _22;
	protected long _23;
	protected long _24;
	protected long _25;
	protected long _26;
	protected long _27;
	protected long _28;
	protected long _29;
	protected long _30;
	protected long _31;
	protected long _32;
	protected long _33;
	protected long _34;
	protected long _35;
	protected long _36;
	protected long _37;
	protected long _38;
	protected long _39;
	protected long _40;
	protected long _41;
	protected long _42;
	protected long _43;
	protected long _44;
	protected long _45;
	protected long _46;
	protected long _47;
	protected long _48;
	protected long _49;
	protected long _50;
	protected long _51;
	protected long _52;
	protected long _53;
	protected long _54;
	protected long _55;
	protected long _56;
	protected long _57;
	protected long _58;
	protected long _59;
	protected long _60;
	protected long _61;
	protected long _62;
	protected long _63;

	public boolean get(int x, int y, int z) {
		assert x >= 0 && x < WIDTH;
		assert y >= 0 && y < HEIGHT;
		assert z >= 0 && z < DEPTH;
		int position = z * (HEIGHT * WIDTH) + y * WIDTH + x;
		if(position < 1024) return this.get0(position);
		if(position < 2048) return this.get1(position);
		if(position < 3072) return this.get2(position);
		if(position < 4096) return this.get3(position);
		assert false;
		return false;
	}
	protected boolean get0(int position) {
		int offset = 64 - position % 64;
		int mask = 1 << offset;
		if(position < 64) return (this._0 & mask) != 0;
		if(position < 128) return (this._1 & mask) != 0;
		if(position < 192) return (this._2 & mask) != 0;
		if(position < 256) return (this._3 & mask) != 0;
		if(position < 320) return (this._4 & mask) != 0;
		if(position < 384) return (this._5 & mask) != 0;
		if(position < 448) return (this._6 & mask) != 0;
		if(position < 512) return (this._7 & mask) != 0;
		if(position < 576) return (this._8 & mask) != 0;
		if(position < 640) return (this._9 & mask) != 0;
		if(position < 704) return (this._10 & mask) != 0;
		if(position < 768) return (this._11 & mask) != 0;
		if(position < 832) return (this._12 & mask) != 0;
		if(position < 896) return (this._13 & mask) != 0;
		if(position < 960) return (this._14 & mask) != 0;
		if(position < 1024) return (this._15 & mask) != 0;
		assert false;
		return false;
	}
	protected boolean get1(int position) {
		int offset = 64 - position % 64;
		int mask = 1 << offset;
		if(position < 1088) return (this._16 & mask) != 0;
		if(position < 1152) return (this._17 & mask) != 0;
		if(position < 1216) return (this._18 & mask) != 0;
		if(position < 1280) return (this._19 & mask) != 0;
		if(position < 1344) return (this._20 & mask) != 0;
		if(position < 1408) return (this._21 & mask) != 0;
		if(position < 1472) return (this._22 & mask) != 0;
		if(position < 1536) return (this._23 & mask) != 0;
		if(position < 1600) return (this._24 & mask) != 0;
		if(position < 1664) return (this._25 & mask) != 0;
		if(position < 1728) return (this._26 & mask) != 0;
		if(position < 1792) return (this._27 & mask) != 0;
		if(position < 1856) return (this._28 & mask) != 0;
		if(position < 1920) return (this._29 & mask) != 0;
		if(position < 1984) return (this._30 & mask) != 0;
		if(position < 2048) return (this._31 & mask) != 0;
		assert false;
		return false;
	}
	protected boolean get2(int position) {
		int offset = 64 - position % 64;
		int mask = 1 << offset;
		if(position < 2112) return (this._32 & mask) != 0;
		if(position < 2176) return (this._33 & mask) != 0;
		if(position < 2240) return (this._34 & mask) != 0;
		if(position < 2304) return (this._35 & mask) != 0;
		if(position < 2368) return (this._36 & mask) != 0;
		if(position < 2432) return (this._37 & mask) != 0;
		if(position < 2496) return (this._38 & mask) != 0;
		if(position < 2560) return (this._39 & mask) != 0;
		if(position < 2624) return (this._40 & mask) != 0;
		if(position < 2688) return (this._41 & mask) != 0;
		if(position < 2752) return (this._42 & mask) != 0;
		if(position < 2816) return (this._43 & mask) != 0;
		if(position < 2880) return (this._44 & mask) != 0;
		if(position < 2944) return (this._45 & mask) != 0;
		if(position < 3008) return (this._46 & mask) != 0;
		if(position < 3072) return (this._47 & mask) != 0;
		assert false;
		return false;
	}
	protected boolean get3(int position) {
		int offset = 64 - position % 64;
		int mask = 1 << offset;
		if(position < 3136) return (this._48 & mask) != 0;
		if(position < 3200) return (this._49 & mask) != 0;
		if(position < 3264) return (this._50 & mask) != 0;
		if(position < 3328) return (this._51 & mask) != 0;
		if(position < 3392) return (this._52 & mask) != 0;
		if(position < 3456) return (this._53 & mask) != 0;
		if(position < 3520) return (this._54 & mask) != 0;
		if(position < 3584) return (this._55 & mask) != 0;
		if(position < 3648) return (this._56 & mask) != 0;
		if(position < 3712) return (this._57 & mask) != 0;
		if(position < 3776) return (this._58 & mask) != 0;
		if(position < 3840) return (this._59 & mask) != 0;
		if(position < 3904) return (this._60 & mask) != 0;
		if(position < 3968) return (this._61 & mask) != 0;
		if(position < 4032) return (this._62 & mask) != 0;
		if(position < 4096) return (this._63 & mask) != 0;
		assert false;
		return false;
	}

	public void set(int x, int y, int z, boolean v) {
		assert x >= 0 && x < WIDTH;
		assert y >= 0 && y < HEIGHT;
		assert z >= 0 && z < DEPTH;
		int position = z * (HEIGHT * WIDTH) + y * WIDTH + x;
		if(position < 1024) { this.set0(position, v); return; }
		if(position < 2048) { this.set1(position, v); return; }
		if(position < 3072) { this.set2(position, v); return; }
		if(position < 4096) { this.set3(position, v); return; }
		assert false;
	}
	protected void set0(int position, boolean v) {
		int offset = 64 - position % 64;
		int mask = ~(1 << offset);
		int value = v ? 1 << offset : 0;
		if(position < 64) { this._0 = (this._0 & mask) | value; return; }
		if(position < 128) { this._1 = (this._1 & mask) | value; return; }
		if(position < 192) { this._2 = (this._2 & mask) | value; return; }
		if(position < 256) { this._3 = (this._3 & mask) | value; return; }
		if(position < 320) { this._4 = (this._4 & mask) | value; return; }
		if(position < 384) { this._5 = (this._5 & mask) | value; return; }
		if(position < 448) { this._6 = (this._6 & mask) | value; return; }
		if(position < 512) { this._7 = (this._7 & mask) | value; return; }
		if(position < 576) { this._8 = (this._8 & mask) | value; return; }
		if(position < 640) { this._9 = (this._9 & mask) | value; return; }
		if(position < 704) { this._10 = (this._10 & mask) | value; return; }
		if(position < 768) { this._11 = (this._11 & mask) | value; return; }
		if(position < 832) { this._12 = (this._12 & mask) | value; return; }
		if(position < 896) { this._13 = (this._13 & mask) | value; return; }
		if(position < 960) { this._14 = (this._14 & mask) | value; return; }
		if(position < 1024) { this._15 = (this._15 & mask) | value; return; }
		assert false;
	}
	protected void set1(int position, boolean v) {
		int offset = 64 - position % 64;
		int mask = ~(1 << offset);
		int value = v ? 1 << offset : 0;
		if(position < 1088) { this._16 = (this._16 & mask) | value; return; }
		if(position < 1152) { this._17 = (this._17 & mask) | value; return; }
		if(position < 1216) { this._18 = (this._18 & mask) | value; return; }
		if(position < 1280) { this._19 = (this._19 & mask) | value; return; }
		if(position < 1344) { this._20 = (this._20 & mask) | value; return; }
		if(position < 1408) { this._21 = (this._21 & mask) | value; return; }
		if(position < 1472) { this._22 = (this._22 & mask) | value; return; }
		if(position < 1536) { this._23 = (this._23 & mask) | value; return; }
		if(position < 1600) { this._24 = (this._24 & mask) | value; return; }
		if(position < 1664) { this._25 = (this._25 & mask) | value; return; }
		if(position < 1728) { this._26 = (this._26 & mask) | value; return; }
		if(position < 1792) { this._27 = (this._27 & mask) | value; return; }
		if(position < 1856) { this._28 = (this._28 & mask) | value; return; }
		if(position < 1920) { this._29 = (this._29 & mask) | value; return; }
		if(position < 1984) { this._30 = (this._30 & mask) | value; return; }
		if(position < 2048) { this._31 = (this._31 & mask) | value; return; }
		assert false;
	}
	protected void set2(int position, boolean v) {
		int offset = 64 - position % 64;
		int mask = ~(1 << offset);
		int value = v ? 1 << offset : 0;
		if(position < 2112) { this._32 = (this._32 & mask) | value; return; }
		if(position < 2176) { this._33 = (this._33 & mask) | value; return; }
		if(position < 2240) { this._34 = (this._34 & mask) | value; return; }
		if(position < 2304) { this._35 = (this._35 & mask) | value; return; }
		if(position < 2368) { this._36 = (this._36 & mask) | value; return; }
		if(position < 2432) { this._37 = (this._37 & mask) | value; return; }
		if(position < 2496) { this._38 = (this._38 & mask) | value; return; }
		if(position < 2560) { this._39 = (this._39 & mask) | value; return; }
		if(position < 2624) { this._40 = (this._40 & mask) | value; return; }
		if(position < 2688) { this._41 = (this._41 & mask) | value; return; }
		if(position < 2752) { this._42 = (this._42 & mask) | value; return; }
		if(position < 2816) { this._43 = (this._43 & mask) | value; return; }
		if(position < 2880) { this._44 = (this._44 & mask) | value; return; }
		if(position < 2944) { this._45 = (this._45 & mask) | value; return; }
		if(position < 3008) { this._46 = (this._46 & mask) | value; return; }
		if(position < 3072) { this._47 = (this._47 & mask) | value; return; }
		assert false;
	}
	protected void set3(int position, boolean v) {
		int offset = 64 - position % 64;
		int mask = ~(1 << offset);
		int value = v ? 1 << offset : 0;
		if(position < 3136) { this._48 = (this._48 & mask) | value; return; }
		if(position < 3200) { this._49 = (this._49 & mask) | value; return; }
		if(position < 3264) { this._50 = (this._50 & mask) | value; return; }
		if(position < 3328) { this._51 = (this._51 & mask) | value; return; }
		if(position < 3392) { this._52 = (this._52 & mask) | value; return; }
		if(position < 3456) { this._53 = (this._53 & mask) | value; return; }
		if(position < 3520) { this._54 = (this._54 & mask) | value; return; }
		if(position < 3584) { this._55 = (this._55 & mask) | value; return; }
		if(position < 3648) { this._56 = (this._56 & mask) | value; return; }
		if(position < 3712) { this._57 = (this._57 & mask) | value; return; }
		if(position < 3776) { this._58 = (this._58 & mask) | value; return; }
		if(position < 3840) { this._59 = (this._59 & mask) | value; return; }
		if(position < 3904) { this._60 = (this._60 & mask) | value; return; }
		if(position < 3968) { this._61 = (this._61 & mask) | value; return; }
		if(position < 4032) { this._62 = (this._62 & mask) | value; return; }
		if(position < 4096) { this._63 = (this._63 & mask) | value; return; }
		assert false;
	}

	public boolean isIntersecting(BitField that) {
		if(this.isIntersecting0(that)) return true;
		if(this.isIntersecting1(that)) return true;
		if(this.isIntersecting2(that)) return true;
		if(this.isIntersecting3(that)) return true;
		return false;
	}
	protected boolean isIntersecting0(BitField that) {
		if((this._0 & that._0) != 0) return true;
		if((this._1 & that._1) != 0) return true;
		if((this._2 & that._2) != 0) return true;
		if((this._3 & that._3) != 0) return true;
		if((this._4 & that._4) != 0) return true;
		if((this._5 & that._5) != 0) return true;
		if((this._6 & that._6) != 0) return true;
		if((this._7 & that._7) != 0) return true;
		if((this._8 & that._8) != 0) return true;
		if((this._9 & that._9) != 0) return true;
		if((this._10 & that._10) != 0) return true;
		if((this._11 & that._11) != 0) return true;
		if((this._12 & that._12) != 0) return true;
		if((this._13 & that._13) != 0) return true;
		if((this._14 & that._14) != 0) return true;
		if((this._15 & that._15) != 0) return true;
		return false;
	}
	protected boolean isIntersecting1(BitField that) {
		if((this._16 & that._16) != 0) return true;
		if((this._17 & that._17) != 0) return true;
		if((this._18 & that._18) != 0) return true;
		if((this._19 & that._19) != 0) return true;
		if((this._20 & that._20) != 0) return true;
		if((this._21 & that._21) != 0) return true;
		if((this._22 & that._22) != 0) return true;
		if((this._23 & that._23) != 0) return true;
		if((this._24 & that._24) != 0) return true;
		if((this._25 & that._25) != 0) return true;
		if((this._26 & that._26) != 0) return true;
		if((this._27 & that._27) != 0) return true;
		if((this._28 & that._28) != 0) return true;
		if((this._29 & that._29) != 0) return true;
		if((this._30 & that._30) != 0) return true;
		if((this._31 & that._31) != 0) return true;
		return false;
	}
	protected boolean isIntersecting2(BitField that) {
		if((this._32 & that._32) != 0) return true;
		if((this._33 & that._33) != 0) return true;
		if((this._34 & that._34) != 0) return true;
		if((this._35 & that._35) != 0) return true;
		if((this._36 & that._36) != 0) return true;
		if((this._37 & that._37) != 0) return true;
		if((this._38 & that._38) != 0) return true;
		if((this._39 & that._39) != 0) return true;
		if((this._40 & that._40) != 0) return true;
		if((this._41 & that._41) != 0) return true;
		if((this._42 & that._42) != 0) return true;
		if((this._43 & that._43) != 0) return true;
		if((this._44 & that._44) != 0) return true;
		if((this._45 & that._45) != 0) return true;
		if((this._46 & that._46) != 0) return true;
		if((this._47 & that._47) != 0) return true;
		return false;
	}
	protected boolean isIntersecting3(BitField that) {
		if((this._48 & that._48) != 0) return true;
		if((this._49 & that._49) != 0) return true;
		if((this._50 & that._50) != 0) return true;
		if((this._51 & that._51) != 0) return true;
		if((this._52 & that._52) != 0) return true;
		if((this._53 & that._53) != 0) return true;
		if((this._54 & that._54) != 0) return true;
		if((this._55 & that._55) != 0) return true;
		if((this._56 & that._56) != 0) return true;
		if((this._57 & that._57) != 0) return true;
		if((this._58 & that._58) != 0) return true;
		if((this._59 & that._59) != 0) return true;
		if((this._60 & that._60) != 0) return true;
		if((this._61 & that._61) != 0) return true;
		if((this._62 & that._62) != 0) return true;
		if((this._63 & that._63) != 0) return true;
		return false;
	}

	public void union(BitField that) {
		this.union0(that);
		this.union1(that);
		this.union2(that);
		this.union3(that);
	}
	protected void union0(BitField that) {
		this._0 |= that._0;
		this._1 |= that._1;
		this._2 |= that._2;
		this._3 |= that._3;
		this._4 |= that._4;
		this._5 |= that._5;
		this._6 |= that._6;
		this._7 |= that._7;
		this._8 |= that._8;
		this._9 |= that._9;
		this._10 |= that._10;
		this._11 |= that._11;
		this._12 |= that._12;
		this._13 |= that._13;
		this._14 |= that._14;
		this._15 |= that._15;
	}
	protected void union1(BitField that) {
		this._16 |= that._16;
		this._17 |= that._17;
		this._18 |= that._18;
		this._19 |= that._19;
		this._20 |= that._20;
		this._21 |= that._21;
		this._22 |= that._22;
		this._23 |= that._23;
		this._24 |= that._24;
		this._25 |= that._25;
		this._26 |= that._26;
		this._27 |= that._27;
		this._28 |= that._28;
		this._29 |= that._29;
		this._30 |= that._30;
		this._31 |= that._31;
	}
	protected void union2(BitField that) {
		this._32 |= that._32;
		this._33 |= that._33;
		this._34 |= that._34;
		this._35 |= that._35;
		this._36 |= that._36;
		this._37 |= that._37;
		this._38 |= that._38;
		this._39 |= that._39;
		this._40 |= that._40;
		this._41 |= that._41;
		this._42 |= that._42;
		this._43 |= that._43;
		this._44 |= that._44;
		this._45 |= that._45;
		this._46 |= that._46;
		this._47 |= that._47;
	}
	protected void union3(BitField that) {
		this._48 |= that._48;
		this._49 |= that._49;
		this._50 |= that._50;
		this._51 |= that._51;
		this._52 |= that._52;
		this._53 |= that._53;
		this._54 |= that._54;
		this._55 |= that._55;
		this._56 |= that._56;
		this._57 |= that._57;
		this._58 |= that._58;
		this._59 |= that._59;
		this._60 |= that._60;
		this._61 |= that._61;
		this._62 |= that._62;
		this._63 |= that._63;
	}

	public void intersect(BitField that) {
		this.intersect0(that);
		this.intersect1(that);
		this.intersect2(that);
		this.intersect3(that);
	}
	protected void intersect0(BitField that) {
		this._0 &= that._0;
		this._1 &= that._1;
		this._2 &= that._2;
		this._3 &= that._3;
		this._4 &= that._4;
		this._5 &= that._5;
		this._6 &= that._6;
		this._7 &= that._7;
		this._8 &= that._8;
		this._9 &= that._9;
		this._10 &= that._10;
		this._11 &= that._11;
		this._12 &= that._12;
		this._13 &= that._13;
		this._14 &= that._14;
		this._15 &= that._15;
	}
	protected void intersect1(BitField that) {
		this._16 &= that._16;
		this._17 &= that._17;
		this._18 &= that._18;
		this._19 &= that._19;
		this._20 &= that._20;
		this._21 &= that._21;
		this._22 &= that._22;
		this._23 &= that._23;
		this._24 &= that._24;
		this._25 &= that._25;
		this._26 &= that._26;
		this._27 &= that._27;
		this._28 &= that._28;
		this._29 &= that._29;
		this._30 &= that._30;
		this._31 &= that._31;
	}
	protected void intersect2(BitField that) {
		this._32 &= that._32;
		this._33 &= that._33;
		this._34 &= that._34;
		this._35 &= that._35;
		this._36 &= that._36;
		this._37 &= that._37;
		this._38 &= that._38;
		this._39 &= that._39;
		this._40 &= that._40;
		this._41 &= that._41;
		this._42 &= that._42;
		this._43 &= that._43;
		this._44 &= that._44;
		this._45 &= that._45;
		this._46 &= that._46;
		this._47 &= that._47;
	}
	protected void intersect3(BitField that) {
		this._48 &= that._48;
		this._49 &= that._49;
		this._50 &= that._50;
		this._51 &= that._51;
		this._52 &= that._52;
		this._53 &= that._53;
		this._54 &= that._54;
		this._55 &= that._55;
		this._56 &= that._56;
		this._57 &= that._57;
		this._58 &= that._58;
		this._59 &= that._59;
		this._60 &= that._60;
		this._61 &= that._61;
		this._62 &= that._62;
		this._63 &= that._63;
	}

	public void exclusive(BitField that) {
		this.exclusive0(that);
		this.exclusive1(that);
		this.exclusive2(that);
		this.exclusive3(that);
	}
	protected void exclusive0(BitField that) {
		this._0 ^= that._0;
		this._1 ^= that._1;
		this._2 ^= that._2;
		this._3 ^= that._3;
		this._4 ^= that._4;
		this._5 ^= that._5;
		this._6 ^= that._6;
		this._7 ^= that._7;
		this._8 ^= that._8;
		this._9 ^= that._9;
		this._10 ^= that._10;
		this._11 ^= that._11;
		this._12 ^= that._12;
		this._13 ^= that._13;
		this._14 ^= that._14;
		this._15 ^= that._15;
	}
	protected void exclusive1(BitField that) {
		this._16 ^= that._16;
		this._17 ^= that._17;
		this._18 ^= that._18;
		this._19 ^= that._19;
		this._20 ^= that._20;
		this._21 ^= that._21;
		this._22 ^= that._22;
		this._23 ^= that._23;
		this._24 ^= that._24;
		this._25 ^= that._25;
		this._26 ^= that._26;
		this._27 ^= that._27;
		this._28 ^= that._28;
		this._29 ^= that._29;
		this._30 ^= that._30;
		this._31 ^= that._31;
	}
	protected void exclusive2(BitField that) {
		this._32 ^= that._32;
		this._33 ^= that._33;
		this._34 ^= that._34;
		this._35 ^= that._35;
		this._36 ^= that._36;
		this._37 ^= that._37;
		this._38 ^= that._38;
		this._39 ^= that._39;
		this._40 ^= that._40;
		this._41 ^= that._41;
		this._42 ^= that._42;
		this._43 ^= that._43;
		this._44 ^= that._44;
		this._45 ^= that._45;
		this._46 ^= that._46;
		this._47 ^= that._47;
	}
	protected void exclusive3(BitField that) {
		this._48 ^= that._48;
		this._49 ^= that._49;
		this._50 ^= that._50;
		this._51 ^= that._51;
		this._52 ^= that._52;
		this._53 ^= that._53;
		this._54 ^= that._54;
		this._55 ^= that._55;
		this._56 ^= that._56;
		this._57 ^= that._57;
		this._58 ^= that._58;
		this._59 ^= that._59;
		this._60 ^= that._60;
		this._61 ^= that._61;
		this._62 ^= that._62;
		this._63 ^= that._63;
	}

	public void complement() {
		this.complement0();
		this.complement1();
		this.complement2();
		this.complement3();
	}
	protected void complement0() {
		this._0 = ~this._0;
		this._1 = ~this._1;
		this._2 = ~this._2;
		this._3 = ~this._3;
		this._4 = ~this._4;
		this._5 = ~this._5;
		this._6 = ~this._6;
		this._7 = ~this._7;
		this._8 = ~this._8;
		this._9 = ~this._9;
		this._10 = ~this._10;
		this._11 = ~this._11;
		this._12 = ~this._12;
		this._13 = ~this._13;
		this._14 = ~this._14;
		this._15 = ~this._15;
	}
	protected void complement1() {
		this._16 = ~this._16;
		this._17 = ~this._17;
		this._18 = ~this._18;
		this._19 = ~this._19;
		this._20 = ~this._20;
		this._21 = ~this._21;
		this._22 = ~this._22;
		this._23 = ~this._23;
		this._24 = ~this._24;
		this._25 = ~this._25;
		this._26 = ~this._26;
		this._27 = ~this._27;
		this._28 = ~this._28;
		this._29 = ~this._29;
		this._30 = ~this._30;
		this._31 = ~this._31;
	}
	protected void complement2() {
		this._32 = ~this._32;
		this._33 = ~this._33;
		this._34 = ~this._34;
		this._35 = ~this._35;
		this._36 = ~this._36;
		this._37 = ~this._37;
		this._38 = ~this._38;
		this._39 = ~this._39;
		this._40 = ~this._40;
		this._41 = ~this._41;
		this._42 = ~this._42;
		this._43 = ~this._43;
		this._44 = ~this._44;
		this._45 = ~this._45;
		this._46 = ~this._46;
		this._47 = ~this._47;
	}
	protected void complement3() {
		this._48 = ~this._48;
		this._49 = ~this._49;
		this._50 = ~this._50;
		this._51 = ~this._51;
		this._52 = ~this._52;
		this._53 = ~this._53;
		this._54 = ~this._54;
		this._55 = ~this._55;
		this._56 = ~this._56;
		this._57 = ~this._57;
		this._58 = ~this._58;
		this._59 = ~this._59;
		this._60 = ~this._60;
		this._61 = ~this._61;
		this._62 = ~this._62;
		this._63 = ~this._63;
	}

	public void subtract(BitField that) {
		this.subtract0(that);
		this.subtract1(that);
		this.subtract2(that);
		this.subtract3(that);
	}
	protected void subtract0(BitField that) {
		this._0 &= ~that._0;
		this._1 &= ~that._1;
		this._2 &= ~that._2;
		this._3 &= ~that._3;
		this._4 &= ~that._4;
		this._5 &= ~that._5;
		this._6 &= ~that._6;
		this._7 &= ~that._7;
		this._8 &= ~that._8;
		this._9 &= ~that._9;
		this._10 &= ~that._10;
		this._11 &= ~that._11;
		this._12 &= ~that._12;
		this._13 &= ~that._13;
		this._14 &= ~that._14;
		this._15 &= ~that._15;
	}
	protected void subtract1(BitField that) {
		this._16 &= ~that._16;
		this._17 &= ~that._17;
		this._18 &= ~that._18;
		this._19 &= ~that._19;
		this._20 &= ~that._20;
		this._21 &= ~that._21;
		this._22 &= ~that._22;
		this._23 &= ~that._23;
		this._24 &= ~that._24;
		this._25 &= ~that._25;
		this._26 &= ~that._26;
		this._27 &= ~that._27;
		this._28 &= ~that._28;
		this._29 &= ~that._29;
		this._30 &= ~that._30;
		this._31 &= ~that._31;
	}
	protected void subtract2(BitField that) {
		this._32 &= ~that._32;
		this._33 &= ~that._33;
		this._34 &= ~that._34;
		this._35 &= ~that._35;
		this._36 &= ~that._36;
		this._37 &= ~that._37;
		this._38 &= ~that._38;
		this._39 &= ~that._39;
		this._40 &= ~that._40;
		this._41 &= ~that._41;
		this._42 &= ~that._42;
		this._43 &= ~that._43;
		this._44 &= ~that._44;
		this._45 &= ~that._45;
		this._46 &= ~that._46;
		this._47 &= ~that._47;
	}
	protected void subtract3(BitField that) {
		this._48 &= ~that._48;
		this._49 &= ~that._49;
		this._50 &= ~that._50;
		this._51 &= ~that._51;
		this._52 &= ~that._52;
		this._53 &= ~that._53;
		this._54 &= ~that._54;
		this._55 &= ~that._55;
		this._56 &= ~that._56;
		this._57 &= ~that._57;
		this._58 &= ~that._58;
		this._59 &= ~that._59;
		this._60 &= ~that._60;
		this._61 &= ~that._61;
		this._62 &= ~that._62;
		this._63 &= ~that._63;
	}
}
