
// Do NOT edit this file. This file was generated.

package io.github.nadhifradityo.stima_tucil1_23045.bitfields;

public abstract class BitField20x20x10Impl implements BitField {
	public static final int WIDTH = 20;
	public static final int HEIGHT = 20;
	public static final int DEPTH = 10;
	protected long _0;
	protected long _1;
	protected long _2;
	protected long _3;
	protected long _4;
	protected long _5;
	protected long _6;
	protected long _7;
	protected long _8;
	protected long _9;
	protected long _10;
	protected long _11;
	protected long _12;
	protected long _13;
	protected long _14;
	protected long _15;
	protected long _16;
	protected long _17;
	protected long _18;
	protected long _19;
	protected long _20;
	protected long _21;
	protected long _22;
	protected long _23;
	protected long _24;
	protected long _25;
	protected long _26;
	protected long _27;
	protected long _28;
	protected long _29;
	protected long _30;
	protected long _31;
	protected long _32;
	protected long _33;
	protected long _34;
	protected long _35;
	protected long _36;
	protected long _37;
	protected long _38;
	protected long _39;
	protected long _40;
	protected long _41;
	protected long _42;
	protected long _43;
	protected long _44;
	protected long _45;
	protected long _46;
	protected long _47;
	protected long _48;
	protected long _49;
	protected long _50;
	protected long _51;
	protected long _52;
	protected long _53;
	protected long _54;
	protected long _55;
	protected long _56;
	protected long _57;
	protected long _58;
	protected long _59;
	protected long _60;
	protected long _61;
	protected long _62;

	public int getWidth() {
		return WIDTH;
	}
	public int getHeight() {
		return HEIGHT;
	}
	public int getDepth() {
		return DEPTH;
	}

	public boolean getValue(int x, int y, int z) {
		assert x >= 0 && x < WIDTH;
		assert y >= 0 && y < HEIGHT;
		assert z >= 0 && z < DEPTH;
		int position = z * (HEIGHT * WIDTH) + y * WIDTH + x;
		if(position < 1024) return this.getValue_0(position);
		if(position < 2048) return this.getValue_1(position);
		if(position < 3072) return this.getValue_2(position);
		if(position < 4096) return this.getValue_3(position);
		assert false;
		return false;
	}
	protected boolean getValue_0(int position) {
		long mask = 1L << (63 - position % 64);
		if(position < 64) return (this._0 & mask) != 0;
		if(position < 128) return (this._1 & mask) != 0;
		if(position < 192) return (this._2 & mask) != 0;
		if(position < 256) return (this._3 & mask) != 0;
		if(position < 320) return (this._4 & mask) != 0;
		if(position < 384) return (this._5 & mask) != 0;
		if(position < 448) return (this._6 & mask) != 0;
		if(position < 512) return (this._7 & mask) != 0;
		if(position < 576) return (this._8 & mask) != 0;
		if(position < 640) return (this._9 & mask) != 0;
		if(position < 704) return (this._10 & mask) != 0;
		if(position < 768) return (this._11 & mask) != 0;
		if(position < 832) return (this._12 & mask) != 0;
		if(position < 896) return (this._13 & mask) != 0;
		if(position < 960) return (this._14 & mask) != 0;
		if(position < 1024) return (this._15 & mask) != 0;
		assert false;
		return false;
	}
	protected boolean getValue_1(int position) {
		long mask = 1L << (63 - position % 64);
		if(position < 1088) return (this._16 & mask) != 0;
		if(position < 1152) return (this._17 & mask) != 0;
		if(position < 1216) return (this._18 & mask) != 0;
		if(position < 1280) return (this._19 & mask) != 0;
		if(position < 1344) return (this._20 & mask) != 0;
		if(position < 1408) return (this._21 & mask) != 0;
		if(position < 1472) return (this._22 & mask) != 0;
		if(position < 1536) return (this._23 & mask) != 0;
		if(position < 1600) return (this._24 & mask) != 0;
		if(position < 1664) return (this._25 & mask) != 0;
		if(position < 1728) return (this._26 & mask) != 0;
		if(position < 1792) return (this._27 & mask) != 0;
		if(position < 1856) return (this._28 & mask) != 0;
		if(position < 1920) return (this._29 & mask) != 0;
		if(position < 1984) return (this._30 & mask) != 0;
		if(position < 2048) return (this._31 & mask) != 0;
		assert false;
		return false;
	}
	protected boolean getValue_2(int position) {
		long mask = 1L << (63 - position % 64);
		if(position < 2112) return (this._32 & mask) != 0;
		if(position < 2176) return (this._33 & mask) != 0;
		if(position < 2240) return (this._34 & mask) != 0;
		if(position < 2304) return (this._35 & mask) != 0;
		if(position < 2368) return (this._36 & mask) != 0;
		if(position < 2432) return (this._37 & mask) != 0;
		if(position < 2496) return (this._38 & mask) != 0;
		if(position < 2560) return (this._39 & mask) != 0;
		if(position < 2624) return (this._40 & mask) != 0;
		if(position < 2688) return (this._41 & mask) != 0;
		if(position < 2752) return (this._42 & mask) != 0;
		if(position < 2816) return (this._43 & mask) != 0;
		if(position < 2880) return (this._44 & mask) != 0;
		if(position < 2944) return (this._45 & mask) != 0;
		if(position < 3008) return (this._46 & mask) != 0;
		if(position < 3072) return (this._47 & mask) != 0;
		assert false;
		return false;
	}
	protected boolean getValue_3(int position) {
		long mask = 1L << (63 - position % 64);
		if(position < 3136) return (this._48 & mask) != 0;
		if(position < 3200) return (this._49 & mask) != 0;
		if(position < 3264) return (this._50 & mask) != 0;
		if(position < 3328) return (this._51 & mask) != 0;
		if(position < 3392) return (this._52 & mask) != 0;
		if(position < 3456) return (this._53 & mask) != 0;
		if(position < 3520) return (this._54 & mask) != 0;
		if(position < 3584) return (this._55 & mask) != 0;
		if(position < 3648) return (this._56 & mask) != 0;
		if(position < 3712) return (this._57 & mask) != 0;
		if(position < 3776) return (this._58 & mask) != 0;
		if(position < 3840) return (this._59 & mask) != 0;
		if(position < 3904) return (this._60 & mask) != 0;
		if(position < 3968) return (this._61 & mask) != 0;
		if(position < 4032) return (this._62 & mask) != 0;
		assert false;
		return false;
	}

	public abstract ImmutableBitField20x20x10Impl toImmutable();
	public abstract MutableBitField20x20x10Impl toMutable();
	public abstract BitField clone();

	public boolean isIntersecting(BitField that0) {
		if(!(that0 instanceof BitField20x20x10Impl))
			return BitField.super.isIntersecting(that0);
		var that = (BitField20x20x10Impl) that0;
		if(this.isIntersecting_0(that)) return true;
		if(this.isIntersecting_1(that)) return true;
		if(this.isIntersecting_2(that)) return true;
		if(this.isIntersecting_3(that)) return true;
		return false;
	}
	protected boolean isIntersecting_0(BitField20x20x10Impl that) {
		if((this._0 & that._0) != 0) return true;
		if((this._1 & that._1) != 0) return true;
		if((this._2 & that._2) != 0) return true;
		if((this._3 & that._3) != 0) return true;
		if((this._4 & that._4) != 0) return true;
		if((this._5 & that._5) != 0) return true;
		if((this._6 & that._6) != 0) return true;
		if((this._7 & that._7) != 0) return true;
		if((this._8 & that._8) != 0) return true;
		if((this._9 & that._9) != 0) return true;
		if((this._10 & that._10) != 0) return true;
		if((this._11 & that._11) != 0) return true;
		if((this._12 & that._12) != 0) return true;
		if((this._13 & that._13) != 0) return true;
		if((this._14 & that._14) != 0) return true;
		if((this._15 & that._15) != 0) return true;
		return false;
	}
	protected boolean isIntersecting_1(BitField20x20x10Impl that) {
		if((this._16 & that._16) != 0) return true;
		if((this._17 & that._17) != 0) return true;
		if((this._18 & that._18) != 0) return true;
		if((this._19 & that._19) != 0) return true;
		if((this._20 & that._20) != 0) return true;
		if((this._21 & that._21) != 0) return true;
		if((this._22 & that._22) != 0) return true;
		if((this._23 & that._23) != 0) return true;
		if((this._24 & that._24) != 0) return true;
		if((this._25 & that._25) != 0) return true;
		if((this._26 & that._26) != 0) return true;
		if((this._27 & that._27) != 0) return true;
		if((this._28 & that._28) != 0) return true;
		if((this._29 & that._29) != 0) return true;
		if((this._30 & that._30) != 0) return true;
		if((this._31 & that._31) != 0) return true;
		return false;
	}
	protected boolean isIntersecting_2(BitField20x20x10Impl that) {
		if((this._32 & that._32) != 0) return true;
		if((this._33 & that._33) != 0) return true;
		if((this._34 & that._34) != 0) return true;
		if((this._35 & that._35) != 0) return true;
		if((this._36 & that._36) != 0) return true;
		if((this._37 & that._37) != 0) return true;
		if((this._38 & that._38) != 0) return true;
		if((this._39 & that._39) != 0) return true;
		if((this._40 & that._40) != 0) return true;
		if((this._41 & that._41) != 0) return true;
		if((this._42 & that._42) != 0) return true;
		if((this._43 & that._43) != 0) return true;
		if((this._44 & that._44) != 0) return true;
		if((this._45 & that._45) != 0) return true;
		if((this._46 & that._46) != 0) return true;
		if((this._47 & that._47) != 0) return true;
		return false;
	}
	protected boolean isIntersecting_3(BitField20x20x10Impl that) {
		if((this._48 & that._48) != 0) return true;
		if((this._49 & that._49) != 0) return true;
		if((this._50 & that._50) != 0) return true;
		if((this._51 & that._51) != 0) return true;
		if((this._52 & that._52) != 0) return true;
		if((this._53 & that._53) != 0) return true;
		if((this._54 & that._54) != 0) return true;
		if((this._55 & that._55) != 0) return true;
		if((this._56 & that._56) != 0) return true;
		if((this._57 & that._57) != 0) return true;
		if((this._58 & that._58) != 0) return true;
		if((this._59 & that._59) != 0) return true;
		if((this._60 & that._60) != 0) return true;
		if((this._61 & that._61) != 0) return true;
		if((this._62 & that._62) != 0) return true;
		return false;
	}
}
