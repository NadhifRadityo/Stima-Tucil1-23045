
// Do NOT edit this file. This file was generated.

package io.github.nadhifradityo.stima_tucil1_23045.bitfields;

public abstract class BitField32x32x1Impl implements BitField {
	public static final int WIDTH = 32;
	public static final int HEIGHT = 32;
	public static final int DEPTH = 1;
	protected long _0;
	protected long _1;
	protected long _2;
	protected long _3;
	protected long _4;
	protected long _5;
	protected long _6;
	protected long _7;
	protected long _8;
	protected long _9;
	protected long _10;
	protected long _11;
	protected long _12;
	protected long _13;
	protected long _14;
	protected long _15;

	public int getWidth() {
		return WIDTH;
	}
	public int getHeight() {
		return HEIGHT;
	}
	public int getDepth() {
		return DEPTH;
	}

	public boolean getValue(int x, int y, int z) {
		assert x >= 0 && x < WIDTH;
		assert y >= 0 && y < HEIGHT;
		assert z >= 0 && z < DEPTH;
		int position = z * (HEIGHT * WIDTH) + y * WIDTH + x;
		if(position < 1024) return this.getValue_0(position);
		assert false;
		return false;
	}
	protected boolean getValue_0(int position) {
		long mask = 1L << (63 - position % 64);
		if(position < 64) return (this._0 & mask) != 0;
		if(position < 128) return (this._1 & mask) != 0;
		if(position < 192) return (this._2 & mask) != 0;
		if(position < 256) return (this._3 & mask) != 0;
		if(position < 320) return (this._4 & mask) != 0;
		if(position < 384) return (this._5 & mask) != 0;
		if(position < 448) return (this._6 & mask) != 0;
		if(position < 512) return (this._7 & mask) != 0;
		if(position < 576) return (this._8 & mask) != 0;
		if(position < 640) return (this._9 & mask) != 0;
		if(position < 704) return (this._10 & mask) != 0;
		if(position < 768) return (this._11 & mask) != 0;
		if(position < 832) return (this._12 & mask) != 0;
		if(position < 896) return (this._13 & mask) != 0;
		if(position < 960) return (this._14 & mask) != 0;
		if(position < 1024) return (this._15 & mask) != 0;
		assert false;
		return false;
	}

	public abstract ImmutableBitField32x32x1Impl toImmutable();
	public abstract MutableBitField32x32x1Impl toMutable();
	public abstract BitField clone();

	public boolean isIntersecting(BitField that0) {
		if(!(that0 instanceof BitField32x32x1Impl))
			return BitField.super.isIntersecting(that0);
		var that = (BitField32x32x1Impl) that0;
		if(this.isIntersecting_0(that)) return true;
		return false;
	}
	protected boolean isIntersecting_0(BitField32x32x1Impl that) {
		if((this._0 & that._0) != 0) return true;
		if((this._1 & that._1) != 0) return true;
		if((this._2 & that._2) != 0) return true;
		if((this._3 & that._3) != 0) return true;
		if((this._4 & that._4) != 0) return true;
		if((this._5 & that._5) != 0) return true;
		if((this._6 & that._6) != 0) return true;
		if((this._7 & that._7) != 0) return true;
		if((this._8 & that._8) != 0) return true;
		if((this._9 & that._9) != 0) return true;
		if((this._10 & that._10) != 0) return true;
		if((this._11 & that._11) != 0) return true;
		if((this._12 & that._12) != 0) return true;
		if((this._13 & that._13) != 0) return true;
		if((this._14 & that._14) != 0) return true;
		if((this._15 & that._15) != 0) return true;
		return false;
	}
}
